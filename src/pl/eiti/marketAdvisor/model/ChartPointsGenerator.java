package pl.eiti.marketAdvisor.model;

import matlabcontrol.*;
import java.util.ArrayList;
import pl.eiti.marketAdvisor.common.ChartPoint;
import pl.eiti.marketAdvisor.common.DecisionParameters;

/**
 * @author Jakub Swiatkowski
 * Class responsible for generating points for risk-income chart.
 */
public class ChartPointsGenerator {
  
	/**
	 * The function return ChartPoints list. 
	 * It requires volume given as parameter.
	 * It connects to MATLAB via external library 'matlabcontrol'.
	 * Points are generated by MATLAB function get_chart_points.
	 * More documentation about the process of generating chart points 
	 * can be found in MATLAB files.
	 * 
	 * Paramters are returned in following format:
	 * 0 - (riskVals.length - 1) -> price parameter
	 * riskVals.length - (2*riskVals.length - 1) -> quality parameter
	 * 2*riskVals.length - (3*riskVals.length - 1) -> internet adv parameter
	 * 3*riskVals.length - (4*riskVals.length - 1) -> magazine adv parameter
	 * 4*riskVals.length - (5*riskVals.length - 1) -> TV adv parameter
	 * 
	 * @param Volume of traded products.
	 * @return List of points for drawing the chart.
	 */
	
	ArrayList<ChartPoint> getChartPoints(int volume, int pointsNumber) throws MatlabConnectionException, MatlabInvocationException{
		
		ArrayList<ChartPoint> chartPoints = new ArrayList<ChartPoint>();
		
		
	    int nmbrOfReturnedVals = 3;
	    String matlabCommand = "get_chart_points";	
	    Object[] argument = {volume, pointsNumber};
	    
	    MatlabProxy proxy = MatlabProxySingleton.getInstance();
	    Object[] returnedValues = proxy.returningFeval(matlabCommand, nmbrOfReturnedVals, argument);
	    double[] riskVals = (double[])returnedValues[0];
	    double[] results = (double[])returnedValues[1];
	    double[] params = (double[]) returnedValues[2];
	  
	    int qualStartIndex = riskVals.length; 
		int intAdvStartIndex = 2*riskVals.length;
		int magAdvStartIndex = 3*riskVals.length;
		int tvAdvStartIndex = 4*riskVals.length;
		
	    // create  ChartPoints
	    for(int i = 0; i< (riskVals.length ); i++){
	    	
		    ChartPoint point = new ChartPoint((int)results[i],riskVals[i],params[i],params[qualStartIndex+i],params[intAdvStartIndex+i],params[magAdvStartIndex+i],params[tvAdvStartIndex+i]);
		    chartPoints.add(point);
	    }
		return chartPoints;
	}
	
	/**
	  * The method computes the chart point for given decisions parameters
	  * @param decision Desired parameters.
	  * @return Point on chart associated with given parameters. 
	  */
	ChartPoint getChartPointForDecisions(DecisionParameters decision) throws MatlabConnectionException, MatlabInvocationException{
		 
		int nmbrOfReturnedVals = 2;
		String matlabCommand = "compute_risk_and_result";	
		double[] decisions = {decision.getPriceInPennies(),decision.getQuality(),decision.getInternetAdv(),decision.getMagazineAdv(),decision.getTvAdv(),decision.getVolume()}; 
		Object[] argument = {decisions};
		 
		MatlabProxy proxy = MatlabProxySingleton.getInstance();
		Object[] returnedValues = proxy.returningFeval(matlabCommand, nmbrOfReturnedVals, argument);
		
		double[] riskTab = (double []) returnedValues[0];
		double[] resultTab = (double []) returnedValues[1];
		
		double risk = riskTab[0];
		int result = (int)resultTab[0];
		
		return new ChartPoint(result,risk,decision.getPriceInPennies(),decision.getQuality(),decision.getInternetAdv(),decision.getMagazineAdv(),decision.getTvAdv());
	}
	
}